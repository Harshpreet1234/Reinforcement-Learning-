pip install pygame

import pygame
import numpy as np
import random

# Constants
WIDTH, HEIGHT = 400, 400
GRID_SIZE = 20
PACMAN_SIZE = 20
GHOST_SIZE = 20
NUM_GHOSTS = 3
NUM_EPISODES = 1000
LEARNING_RATE = 0.1
DISCOUNT_FACTOR = 0.9
EPSILON = 0.1

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# Initialize Pygame
pygame.init()
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Pac-Man")

# Pac-Man and Ghosts
pacman_x, pacman_y = 0, 0
ghosts = [(60, 60) for _ in range(NUM_GHOSTS)]

# Q-table
num_states = (WIDTH // GRID_SIZE) * (HEIGHT // GRID_SIZE)
num_actions = 4  # Up, Down, Left, Right
q_table = np.zeros((num_states, num_actions))

# Helper function to convert coordinates to state
def state_from_coord(x, y):
    return (x // GRID_SIZE) + (y // GRID_SIZE) * (WIDTH // GRID_SIZE)

# Game loop
for episode in range(NUM_EPISODES):
    pacman_x, pacman_y = 0, 0  # Reset Pac-Man's position
    game_over = False

    while not game_over:
        current_state = state_from_coord(pacman_x, pacman_y)

        # Epsilon-greedy policy for action selection
        if random.uniform(0, 1) < EPSILON:
            action = random.randint(0, 3)
        else:
            action = np.argmax(q_table[current_state])

        # Move Pac-Man
        if action == 0:
            pacman_y -= GRID_SIZE
        elif action == 1:
            pacman_y += GRID_SIZE
        elif action == 2:
            pacman_x -= GRID_SIZE
        elif action == 3:
            pacman_x += GRID_SIZE

        # Check for collisions with walls
        pacman_x = max(0, min(pacman_x, WIDTH - PACMAN_SIZE))
        pacman_y = max(0, min(pacman_y, HEIGHT - PACMAN_SIZE))

        # Calculate reward (negative for now)
        reward = -1

        # Update Q-value using Q-learning equation
        new_state = state_from_coord(pacman_x, pacman_y)
        best_next_action = np.argmax(q_table[new_state])
        q_table[current_state][action] += LEARNING_RATE * (
            reward + DISCOUNT_FACTOR * q_table[new_state][best_next_action] - q_table[current_state][action]
        )

        # Check for game over condition (e.g., Pac-Man collects all pellets)
        if episode == NUM_EPISODES - 1:
            game_over = True

    # Reset the game for the next episode

# Close Pygame
pygame.quit()
